import { useState, useRef, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar'\nimport { Badge } from '@/components/ui/badge'\nimport { Send, Bot, User, Mic, FileText } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { AiChatMessage } from '@shared/schema'\n\ninterface AiChatInterfaceProps {\n  messages?: AiChatMessage[]\n  onSendMessage?: (message: string) => void\n  onVoiceInput?: () => void\n  isLoading?: boolean\n  className?: string\n}\n\nexport default function AiChatInterface({\n  messages = [],\n  onSendMessage,\n  onVoiceInput,\n  isLoading = false,\n  className\n}: AiChatInterfaceProps) {\n  const [inputValue, setInputValue] = useState('')\n  const [isListening, setIsListening] = useState(false)\n  const scrollAreaRef = useRef<HTMLDivElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight\n    }\n  }, [messages])\n\n  const handleSend = () => {\n    if (inputValue.trim() && !isLoading) {\n      onSendMessage?.(inputValue.trim())\n      setInputValue('')\n    }\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSend()\n    }\n  }\n\n  const handleVoiceInput = () => {\n    setIsListening(!isListening)\n    onVoiceInput?.()\n  }\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  return (\n    <Card className={cn('flex flex-col h-full', className)}>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Bot className=\"h-5 w-5 text-primary\" />\n          AI Journal Assistant\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Ask me anything about your journal entries, memories, or thoughts\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        {/* Messages */}\n        <ScrollArea className=\"flex-1 px-6\" ref={scrollAreaRef}>\n          <div className=\"space-y-4 pb-4\">\n            {messages.length === 0 && (\n              <div className=\"text-center py-8\">\n                <Bot className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">Start a conversation</h3>\n                <p className=\"text-sm text-muted-foreground max-w-sm mx-auto\">\n                  Ask me to find specific memories, analyze your mood patterns, or help you reflect on your entries.\n                </p>\n                <div className=\"mt-4 flex flex-wrap gap-2 justify-center\">\n                  <Badge variant=\"outline\" className=\"cursor-pointer hover-elevate\" onClick={() => setInputValue('What did I write about last week?')}>\n                    Recent entries\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"cursor-pointer hover-elevate\" onClick={() => setInputValue('Show me my happiest memories')}>\n                    Happy memories\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"cursor-pointer hover-elevate\" onClick={() => setInputValue('What themes appear most in my journal?')}>\n                    Common themes\n                  </Badge>\n                </div>\n              </div>\n            )}\n            \n            {messages.map((message, index) => (\n              <div\n                key={message.id || index}\n                className={cn(\n                  'flex gap-3',\n                  message.role === 'user' ? 'justify-end' : 'justify-start'\n                )}\n                data-testid={`message-${message.role}-${index}`}\n              >\n                {message.role === 'assistant' && (\n                  <Avatar className=\"h-8 w-8 mt-1\">\n                    <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                      <Bot className=\"h-4 w-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                )}\n                \n                <div\n                  className={cn(\n                    'max-w-[80%] rounded-lg px-3 py-2',\n                    message.role === 'user'\n                      ? 'bg-primary text-primary-foreground ml-12'\n                      : 'bg-muted text-foreground'\n                  )}\n                >\n                  <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                  <div className=\"flex items-center justify-between mt-1\">\n                    <span className={cn(\n                      'text-xs',\n                      message.role === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground'\n                    )}>\n                      {formatTime(message.timestamp)}\n                    </span>\n                    \n                    {message.relatedEntryIds && message.relatedEntryIds.length > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-2 h-5 text-xs\">\n                        <FileText className=\"h-3 w-3 mr-1\" />\n                        {message.relatedEntryIds.length} {message.relatedEntryIds.length === 1 ? 'entry' : 'entries'}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                \n                {message.role === 'user' && (\n                  <Avatar className=\"h-8 w-8 mt-1\">\n                    <AvatarFallback className=\"bg-secondary text-secondary-foreground\">\n                      <User className=\"h-4 w-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                )}\n              </div>\n            ))}\n            \n            {isLoading && (\n              <div className=\"flex gap-3 justify-start\">\n                <Avatar className=\"h-8 w-8 mt-1\">\n                  <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                    <Bot className=\"h-4 w-4\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"bg-muted text-foreground rounded-lg px-3 py-2 max-w-[80%]\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex gap-1\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" />\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }} />\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }} />\n                    </div>\n                    <span className=\"text-xs text-muted-foreground\">AI is thinking...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n        \n        {/* Input area */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex gap-2\">\n            <div className=\"flex-1 relative\">\n              <Input\n                ref={inputRef}\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Ask about your journal entries...\"\n                disabled={isLoading}\n                className=\"pr-12\"\n                data-testid=\"input-ai-chat-message\"\n              />\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className={cn(\n                  'absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8',\n                  isListening && 'text-destructive'\n                )}\n                onClick={handleVoiceInput}\n                data-testid=\"button-voice-input\"\n              >\n                <Mic className={cn('h-4 w-4', isListening && 'animate-pulse')} />\n              </Button>\n            </div>\n            \n            <Button\n              onClick={handleSend}\n              disabled={!inputValue.trim() || isLoading}\n              size=\"icon\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}"