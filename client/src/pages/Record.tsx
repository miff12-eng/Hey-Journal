import { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Switch } from '@/components/ui/switch'\nimport { Label } from '@/components/ui/label'\nimport { Badge } from '@/components/ui/badge'\nimport { Separator } from '@/components/ui/separator'\nimport { Camera, Image, Users, Globe, Lock, Save, X, Upload } from 'lucide-react'\nimport RecordButton from '@/components/RecordButton'\nimport ThemeToggle from '@/components/ThemeToggle'\nimport { cn } from '@/lib/utils'\n\ntype PrivacyLevel = 'private' | 'shared' | 'public'\n\nexport default function Record() {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [tags, setTags] = useState<string[]>([])\n  const [newTag, setNewTag] = useState('')\n  const [privacy, setPrivacy] = useState<PrivacyLevel>('private')\n  const [isRecording, setIsRecording] = useState(false)\n  const [isTranscribing, setIsTranscribing] = useState(false)\n  const [attachedFiles, setAttachedFiles] = useState<File[]>([])\n\n  const handleRecordingStart = () => {\n    setIsRecording(true)\n    console.log('Recording started')\n  }\n\n  const handleRecordingStop = (audioBlob: Blob) => {\n    setIsRecording(false)\n    setIsTranscribing(true)\n    console.log('Recording stopped, processing...', audioBlob.size)\n    \n    // Simulate transcription processing\n    setTimeout(() => {\n      const mockTranscription = 'This is a sample transcription of your voice recording. In a real app, this would be the actual transcribed text from your speech using Distil-Whisper or similar AI transcription service.'\n      setContent(prev => prev + (prev ? '\\n\\n' : '') + mockTranscription)\n      setIsTranscribing(false)\n    }, 2000)\n  }\n\n  const handleTranscriptionUpdate = (text: string) => {\n    setContent(text)\n  }\n\n  const addTag = () => {\n    if (newTag.trim() && !tags.includes(newTag.trim())) {\n      setTags([...tags, newTag.trim()])\n      setNewTag('')\n    }\n  }\n\n  const removeTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove))\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      addTag()\n    }\n  }\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const newFiles = Array.from(e.target.files)\n      setAttachedFiles(prev => [...prev, ...newFiles])\n    }\n  }\n\n  const removeFile = (index: number) => {\n    setAttachedFiles(prev => prev.filter((_, i) => i !== index))\n  }\n\n  const handleSave = () => {\n    const entry = {\n      title: title.trim(),\n      content: content.trim(),\n      tags,\n      privacy,\n      attachedFiles\n    }\n    console.log('Saving entry:', entry)\n    // In a real app, this would save to the backend\n  }\n\n  const privacyOptions = [\n    { value: 'private' as const, label: 'Private', icon: Lock, description: 'Only you can see this' },\n    { value: 'shared' as const, label: 'Shared', icon: Users, description: 'Share with specific people' },\n    { value: 'public' as const, label: 'Public', icon: Globe, description: 'Everyone can see this' }\n  ]\n\n  return (\n    <div className=\"flex flex-col h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-40 bg-background border-b border-border px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-lg font-semibold text-foreground\">New Entry</h1>\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            <Button \n              onClick={handleSave}\n              disabled={!content.trim()}\n              size=\"sm\"\n              data-testid=\"button-save-entry\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Recording interface */}\n      <div className=\"px-4 py-6 bg-gradient-to-b from-background to-muted/30\">\n        <div className=\"text-center space-y-4\">\n          <h2 className=\"text-xl font-medium text-foreground\">Voice Recording</h2>\n          <p className=\"text-sm text-muted-foreground max-w-sm mx-auto\">\n            {isRecording ? 'Recording in progress... Speak clearly for better transcription' :\n             isTranscribing ? 'Processing your recording with AI transcription...' :\n             'Tap the button below to start recording your thoughts'}\n          </p>\n          \n          <div className=\"flex justify-center py-4\">\n            <RecordButton\n              onRecordingStart={handleRecordingStart}\n              onRecordingStop={handleRecordingStop}\n              onTranscriptionUpdate={handleTranscriptionUpdate}\n              disabled={isTranscribing}\n            />\n          </div>\n          \n          {isTranscribing && (\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n              <div className=\"animate-spin h-4 w-4 border-2 border-primary border-t-transparent rounded-full\" />\n              Transcribing with AI...\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Entry form */}\n      <div className=\"flex-1 px-4 py-4 space-y-6 pb-20\">\n        {/* Title */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"title\" className=\"text-sm font-medium text-foreground\">Title (optional)</Label>\n          <Input\n            id=\"title\"\n            placeholder=\"Give your entry a title...\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            data-testid=\"input-entry-title\"\n          />\n        </div>\n\n        {/* Content */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"content\" className=\"text-sm font-medium text-foreground\">Your thoughts</Label>\n          <Textarea\n            id=\"content\"\n            placeholder=\"Start typing or use voice recording above...\"\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            className=\"min-h-32 resize-none\"\n            data-testid=\"textarea-entry-content\"\n          />\n        </div>\n\n        {/* Media upload */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Image className=\"h-4 w-4\" />\n              Attachments\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex gap-2\">\n                <input\n                  type=\"file\"\n                  id=\"photo-upload\"\n                  accept=\"image/*\"\n                  multiple\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                />\n                <input\n                  type=\"file\"\n                  id=\"video-upload\"\n                  accept=\"video/*\"\n                  multiple\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                />\n                \n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => document.getElementById('photo-upload')?.click()}\n                  data-testid=\"button-add-photo\"\n                >\n                  <Camera className=\"h-4 w-4 mr-2\" />\n                  Add Photo\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => document.getElementById('video-upload')?.click()}\n                  data-testid=\"button-add-video\"\n                >\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Add Video\n                </Button>\n              </div>\n              \n              {attachedFiles.length > 0 && (\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {attachedFiles.map((file, index) => (\n                    <div key={index} className=\"relative\">\n                      <div className=\"aspect-square bg-muted rounded-md flex items-center justify-center relative overflow-hidden\">\n                        {file.type.startsWith('image/') ? (\n                          <img \n                            src={URL.createObjectURL(file)} \n                            alt={file.name}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <Upload className=\"h-6 w-6 text-muted-foreground\" />\n                        )}\n                        <Button\n                          variant=\"destructive\"\n                          size=\"icon\"\n                          className=\"absolute top-1 right-1 h-6 w-6\"\n                          onClick={() => removeFile(index)}\n                          data-testid={`button-remove-file-${index}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1 truncate\">{file.name}</p>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tags */}\n        <div className=\"space-y-3\">\n          <Label className=\"text-sm font-medium text-foreground\">Tags</Label>\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Add a tag...\"\n              value={newTag}\n              onChange={(e) => setNewTag(e.target.value)}\n              onKeyPress={handleKeyPress}\n              className=\"flex-1\"\n              data-testid=\"input-new-tag\"\n            />\n            <Button onClick={addTag} variant=\"outline\" size=\"sm\" data-testid=\"button-add-tag\">\n              Add\n            </Button>\n          </div>\n          \n          {tags.length > 0 && (\n            <div className=\"flex flex-wrap gap-2\">\n              {tags.map((tag) => (\n                <Badge \n                  key={tag} \n                  variant=\"secondary\" \n                  className=\"gap-1 cursor-pointer hover-elevate\"\n                  onClick={() => removeTag(tag)}\n                  data-testid={`tag-${tag}`}\n                >\n                  #{tag}\n                  <X className=\"h-3 w-3\" />\n                </Badge>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Privacy settings */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Privacy & Sharing</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {privacyOptions.map((option) => {\n              const Icon = option.icon\n              return (\n                <div \n                  key={option.value}\n                  className={cn(\n                    'flex items-center justify-between p-3 rounded-lg border cursor-pointer transition-colors hover-elevate',\n                    privacy === option.value ? 'border-primary bg-primary/5' : 'border-border'\n                  )}\n                  onClick={() => setPrivacy(option.value)}\n                  data-testid={`privacy-${option.value}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className={cn(\n                      'p-2 rounded-full',\n                      privacy === option.value ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n                    )}>\n                      <Icon className=\"h-4 w-4\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">{option.label}</p>\n                      <p className=\"text-xs text-muted-foreground\">{option.description}</p>\n                    </div>\n                  </div>\n                  <Switch \n                    checked={privacy === option.value}\n                    onChange={() => setPrivacy(option.value)}\n                  />\n                </div>\n              )\n            })}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}"